// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelos base para la aplicación

model Empresa {
  id            String   @id @default(cuid())
  nombre        String
  cif           String   @unique
  direccion     String
  email         String
  telefono      String
  logoUrl       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Categoria {
  id        String     @id @default(cuid())
  nombre    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  productos Producto[]
}

model Marca {
  id        String     @id @default(cuid())
  nombre    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  productos Producto[]
}

model Producto {
  id                String                @id @default(cuid())
  nombre            String
  marca             Marca?                @relation(fields: [marcaId], references: [id])
  marcaId           String?
  modelo            String?
  descripcion       String?
  stock             Int                   @default(0)
  precio            Float                 // Precio de venta
  precioCompra      Float?                // Precio de compra (opcional)
  precioAlquiler    Float?                // Precio de alquiler (opcional)
  categoriaId       String
  categoria         Categoria             @relation(fields: [categoriaId], references: [id])
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  // Relaciones con presupuestos y facturas
  itemsPresupuesto  ItemPresupuesto[]
  itemsFactura      ItemFactura[]
  // Relación con equipos individuales (instancias)
  equipoItems       EquipoItem[]
}

model EquipoItem {
  id            String     @id @default(cuid())
  productoId    String
  producto      Producto   @relation(fields: [productoId], references: [id], onDelete: Cascade)
  numeroSerie   String?
  notasInternas String?
  estado        EstadoEquipo @default(DISPONIBLE)
  fechaCompra   DateTime?
  precioCompra  Float?     // Precio individual de compra de esta unidad
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@unique([productoId, numeroSerie])
}

model Cliente {
  id          String        @id @default(cuid())
  nombre      String
  tipo        TipoCliente   @default(PARTICULAR)
  nif         String?       @unique
  direccion   String?
  email       String?
  telefono    String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  // Relaciones
  presupuestos Presupuesto[]
  facturas     Factura[]
}

model Presupuesto {
  id              String            @id @default(cuid())
  numero          String            @unique
  fecha           DateTime          @default(now())
  fechaValidez    DateTime
  clienteId       String
  cliente         Cliente           @relation(fields: [clienteId], references: [id])
  estado          EstadoPresupuesto @default(PENDIENTE)
  observaciones   String?
  subtotal        Float
  iva             Float
  total           Float
  items           ItemPresupuesto[]
  facturaId       String?
  factura         Factura?          @relation(fields: [facturaId], references: [id])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model ItemPresupuesto {
  id            String      @id @default(cuid())
  presupuestoId String
  presupuesto   Presupuesto @relation(fields: [presupuestoId], references: [id], onDelete: Cascade)
  productoId    String
  producto      Producto    @relation(fields: [productoId], references: [id])
  cantidad      Int
  precioUnitario Float
  descuento     Float       @default(0)
  iva           Float
  total         Float
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Factura {
  id            String        @id @default(cuid())
  numero        String        @unique
  fecha         DateTime      @default(now())
  fechaVencimiento DateTime
  clienteId     String
  cliente       Cliente       @relation(fields: [clienteId], references: [id])
  estado        EstadoFactura @default(PENDIENTE)
  observaciones String?
  subtotal      Float
  iva           Float
  total         Float
  items         ItemFactura[]
  presupuestos  Presupuesto[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model ItemFactura {
  id            String   @id @default(cuid())
  facturaId     String
  factura       Factura  @relation(fields: [facturaId], references: [id], onDelete: Cascade)
  productoId    String
  producto      Producto @relation(fields: [productoId], references: [id])
  cantidad      Int
  precioUnitario Float
  descuento     Float    @default(0)
  iva           Float
  total         Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Configuracion {
  id                String  @id @default(cuid())
  ivaPorDefecto     Float   @default(21)
  moneda            String  @default("EUR")
  prefijoFactura    String  @default("FAC-")
  prefijoPresupuesto String @default("PRES-")
  // Solo existe un registro de configuración
  @@map("configuracion")
}

// Enumeraciones

enum TipoCliente {
  PARTICULAR
  EMPRESA
}

enum EstadoPresupuesto {
  PENDIENTE
  APROBADO
  RECHAZADO
  FACTURADO
}

enum EstadoFactura {
  PENDIENTE
  PAGADA
  VENCIDA
  ANULADA
}

enum EstadoEquipo {
  DISPONIBLE
  EN_USO
  EN_REPARACION
  BAJA
}
