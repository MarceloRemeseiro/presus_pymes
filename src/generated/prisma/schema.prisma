// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelos base para la aplicación

model Empresa {
  id        String   @id @default(cuid())
  nombre    String
  cif       String   @unique
  direccion String
  email     String
  telefono  String
  logoUrl   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Categoria {
  id        String     @id @default(cuid())
  nombre    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  productos Producto[]
}

model Marca {
  id        String     @id @default(cuid())
  nombre    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  productos Producto[]
}

model Producto {
  id               String            @id @default(cuid())
  nombre           String
  marca            Marca?            @relation(fields: [marcaId], references: [id])
  marcaId          String?
  modelo           String?
  descripcion      String?
  stock            Int               @default(0)
  precio           Float // Precio de venta
  precioCompra     Float? // Precio de compra (opcional)
  precioAlquiler   Float? // Precio de alquiler (opcional)
  categoriaId      String
  categoria        Categoria         @relation(fields: [categoriaId], references: [id])
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  // Relaciones con presupuestos y facturas
  itemsPresupuesto ItemPresupuesto[]
  itemsFactura     ItemFactura[]
  // Relación con equipos individuales (instancias)
  equipoItems      EquipoItem[]
}

model EquipoItem {
  id            String       @id @default(cuid())
  productoId    String
  producto      Producto     @relation(fields: [productoId], references: [id], onDelete: Cascade)
  numeroSerie   String?
  notasInternas String?
  estado        EstadoEquipo @default(DISPONIBLE)
  fechaCompra   DateTime?
  precioCompra  Float? // Precio individual de compra de esta unidad
  proveedorId   String? // Relación con el proveedor que vendió este equipo
  proveedor     Proveedor?   @relation(fields: [proveedorId], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@unique([productoId, numeroSerie])
}

model Cliente {
  id           String        @id @default(cuid())
  nombre       String
  tipo         TipoCliente   @default(PARTICULAR)
  nif          String?       @unique
  direccion    String?
  ciudad       String?
  email        String?
  telefono     String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  // Relaciones
  presupuestos Presupuesto[]
  facturas     Factura[]
}

model PartidaPresupuesto {
  id                      String                 @id @default(cuid())
  nombre                  String
  descripcion             String?
  items                   ItemPresupuesto[]
  presupuestosProveedores PresupuestoProveedor[] // Relación con presupuestos de proveedores
  itemsFactura            ItemFactura[] // Relación con items de facturas
  facturasProveedores     FacturaProveedor[] // Relación con facturas de proveedores
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt

  @@map("partidas_presupuesto")
}

model Presupuesto {
  id                      String                 @id @default(cuid())
  numero                  String                 @unique
  nombre                  String? // Nombre descriptivo del presupuesto
  referencia              String? // Campo para referencia externa
  fecha                   DateTime               @default(now())
  fechaValidez            DateTime
  fechaMontaje            DateTime?
  fechaInicio             DateTime?
  fechaFin                DateTime?
  clienteId               String? // Hacemos el campo opcional
  cliente                 Cliente?               @relation(fields: [clienteId], references: [id])
  estado                  EstadoPresupuesto      @default(PENDIENTE)
  observaciones           String?
  subtotal                Float
  iva                     Float
  total                   Float
  items                   ItemPresupuesto[]
  presupuestosProveedores PresupuestoProveedor[] // Relación con presupuestos de proveedores
  facturaId               String?
  factura                 Factura?               @relation(fields: [facturaId], references: [id])
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
}

model ItemPresupuesto {
  id             String              @id @default(cuid())
  presupuestoId  String
  presupuesto    Presupuesto         @relation(fields: [presupuestoId], references: [id], onDelete: Cascade)
  productoId     String
  producto       Producto            @relation(fields: [productoId], references: [id])
  tipo           String? // CATEGORIA, EQUIPO, PERSONAL, SEPARADOR
  nombre         String? // Nombre directo para categorías y separadores
  cantidad       Int
  precioUnitario Float
  descuento      Float               @default(0)
  iva            Float
  total          Float
  dias           Int                 @default(1)
  // Relación con la partida
  partidaId      String?
  partida        PartidaPresupuesto? @relation(fields: [partidaId], references: [id])
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
}

model Factura {
  id                  String             @id @default(cuid())
  numero              String             @unique
  numeroPedido        String? // Número de pedido o PO (Purchase Order) opcional
  fecha               DateTime           @default(now())
  fechaVencimiento    DateTime
  clienteId           String? // Ahora es opcional
  cliente             Cliente?           @relation(fields: [clienteId], references: [id])
  estado              EstadoFactura      @default(PENDIENTE)
  observaciones       String?
  subtotal            Float
  iva                 Float
  total               Float
  items               ItemFactura[]
  presupuestos        Presupuesto[]
  gastosTickelia      Tikelia[] // Relación con gastos de Tikelia
  facturasProveedores FacturaProveedor[] // Relación con facturas de proveedores
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
}

model ItemFactura {
  id             String              @id @default(cuid())
  facturaId      String
  factura        Factura             @relation(fields: [facturaId], references: [id], onDelete: Cascade)
  productoId     String
  producto       Producto            @relation(fields: [productoId], references: [id])
  nombre         String? // Nombre personalizado para tipos especiales como PERSONAL
  tipo           String? // CATEGORIA, EQUIPO, PERSONAL, SEPARADOR
  cantidad       Int
  precioUnitario Float
  descuento      Float               @default(0)
  iva            Float
  total          Float
  dias           Int                 @default(1)
  // Relación con la partida
  partidaId      String?
  partida        PartidaPresupuesto? @relation(fields: [partidaId], references: [id])
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
}

model Configuracion {
  id                 String @id @default(cuid())
  ivaPorDefecto      Float  @default(21)
  moneda             String @default("EUR")
  prefijoFactura     String @default("FAC-")
  prefijoPresupuesto String @default("PRES-")

  // Solo existe un registro de configuración
  @@map("configuracion")
}

// Modelos nuevos para personal, proveedores y tikelia

model Puesto {
  id          String           @id @default(cuid())
  nombre      String           @unique
  descripcion String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  // Relación muchos a muchos con personal
  personal    PersonalPuesto[]
}

model Personal {
  id        String           @id @default(cuid())
  nombre    String
  telefono  String?
  email     String?
  notas     String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  // Relación muchos a muchos con puestos
  puestos   PersonalPuesto[]
}

// Tabla intermedia para la relación muchos a muchos entre Personal y Puesto
model PersonalPuesto {
  personalId String
  puestoId   String
  personal   Personal @relation(fields: [personalId], references: [id], onDelete: Cascade)
  puesto     Puesto   @relation(fields: [puestoId], references: [id], onDelete: Cascade)
  asignadoEn DateTime @default(now())

  @@id([personalId, puestoId])
}

model Proveedor {
  id           String                 @id @default(cuid())
  nombre       String
  nif          String?                @unique
  direccion    String?
  email        String?
  telefono     String?
  contacto     String? // Persona de contacto
  notas        String?
  equipos      EquipoItem[] // Relación con los equipos vendidos por este proveedor
  presupuestos PresupuestoProveedor[] // Relación con presupuestos de proveedores
  facturas     FacturaProveedor[] // Relación con facturas de proveedores
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
}

model Tikelia {
  id        String   @id @default(cuid())
  nombre    String
  importe   Float
  fecha     DateTime @default(now())
  facturaId String?
  factura   Factura? @relation(fields: [facturaId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Nuevo modelo para presupuestos de proveedores
model PresupuestoProveedor {
  id              String              @id @default(cuid())
  presupuestoId   String // Relación con el presupuesto principal
  presupuesto     Presupuesto         @relation(fields: [presupuestoId], references: [id], onDelete: Cascade)
  nombre          String // Nombre o concepto del presupuesto/gasto
  descripcion     String? // Descripción opcional
  precio          Float // Precio del presupuesto/gasto
  precioConIVA    Boolean // Indica si el precio incluye IVA
  proveedorId     String? // Relación opcional con proveedor
  proveedor       Proveedor?          @relation(fields: [proveedorId], references: [id])
  partidaId       String? // Relación opcional con partida de presupuesto
  partida         PartidaPresupuesto? @relation(fields: [partidaId], references: [id])
  tipoEspecial    String? // Campo para identificar tipos especiales (gastos-generales, freelance)
  archivoUrl      String? // URL del archivo adjunto (implementación futura)
  documentoNombre String? // Nombre del documento adjunto
  documentoFecha  DateTime? // Fecha del documento
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
}

// Modelo para facturas de proveedores
model FacturaProveedor {
  id              String              @id @default(cuid())
  facturaId       String // Relación con la factura principal
  factura         Factura             @relation(fields: [facturaId], references: [id], onDelete: Cascade)
  nombre          String // Nombre o concepto de la factura/gasto
  descripcion     String? // Descripción opcional
  precio          Float // Precio de la factura/gasto
  precioConIVA    Boolean // Indica si el precio incluye IVA
  proveedorId     String? // Relación opcional con proveedor
  proveedor       Proveedor?          @relation(fields: [proveedorId], references: [id])
  partidaId       String? // Relación opcional con partida de presupuesto
  partida         PartidaPresupuesto? @relation(fields: [partidaId], references: [id])
  tipoEspecial    String? // Campo para identificar tipos especiales (gastos-generales, freelance)
  archivoUrl      String? // URL del archivo adjunto
  documentoNombre String? // Nombre del documento adjunto
  documentoFecha  DateTime? // Fecha del documento
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
}

// Enumeraciones

enum TipoCliente {
  PARTICULAR
  EMPRESA
}

enum EstadoPresupuesto {
  PENDIENTE
  APROBADO
  RECHAZADO
  FACTURADO
}

enum EstadoFactura {
  PENDIENTE
  ENVIADA
  COBRADA
  VENCIDA
  ANULADA
}

enum EstadoEquipo {
  DISPONIBLE
  EN_USO
  EN_REPARACION
  BAJA
}
